#haxenodexample
  .wrapper.clearfix
    #nodejsexample
      article.nodejscode
        header
          h2 node.js
        .code
          code.comment \// example.js
          br
          code
            | var http = require('http');
            | var server = http.createServer(
            |   function (req, res) {
            |     res.writeHead(200, {'Content-Type': 'text/plain'});
            |     res.end('Hello World\\n');
            |   }
            | )
            | 
            | server.listen(1337, "127.0.0.1");
            | console.log('Server running at http://127.0.0.1:1337/');

      article
        header
          h2 run
        .code
          code.comment # in terminal
          br
          kbd $ node example.js
          br
          samp Server running at http://127.0.0.1:1337/
          
    #haxexample
      article.haxecode
        header
          h2 haxenode
        .code
          code.comment \// Haxenode.hx
          br
          code
            | import js.Node;
            | class Haxenode {
            |   public static function main() {
            |     var server = Node.http.createServer( function(
            |       req:NodeHttpServerReq, res:NodeHttpServerResp){
            |         res.setHeader("Content-Type","text/plain");
            |         res.writeHead(200);
            |         res.end('Hello World\\n');
            |       }
            |     );
            | 
            |     server.listen(1337,"localhost");
            |     trace( 'Server running at http://127.0.0.1:1337/' );
            |   }
            | }

      article
        header.compile-and-run
          h2 compile &amp; run
        .code
          code.comment # in terminal
          br
          kbd $ haxe -lib nodejs -js haxenode.js -main Haxenode
          br
          kbd $ node haxenode.js
          br
          samp Server running at http://127.0.0.1:1337/
#main-content
  div(id="haxe:trace")
  .wrapper
    #whatishaxenode.clearfix
      article
        header
          h1 What is haxenode?
        .box.clearfix
          #whatishaxe-left
            h2 All the power of haxe
            .content-wrapper.clearfix
              ul
                li
                  a#what_is_strong_typing(href="http://haxe.org/ref/type_advanced") Strong Typing
                li
                  a#what_is_inlining(href="http://haxe.org/ref/inline") Inlining
                li
                  a#what_is_interfaces(href="http://haxe.org/ref/oop") Interfaces
                li
                  a#what_is_type_inference(href="http://haxe.org/ref/type_infer") Type inference
              ul
                li
                  a#what_is_generics(href="http://haxe.org/ref/type_params") Generics
                li
                  a#what_is_packages(href="http://haxe.org/ref/packages") Packages
                li
                  a#what_is_classes(href="http://haxe.org/ref/oop") Classes
                li
                  a#what_is_conditionals(href="http://haxe.org/ref/conditionals") Conditionals
              ul
                li
                  a#what_is_macros(href="http://haxe.org/manual/macros") Macros
                li
                  a#what_is_enums(href="http://haxe.org/ref/enums") Enums
                li
                  a#what_is_iterators(href="http://haxe.org/ref/iterators") Iterators
          #whatishaxe-right  
            h2 
              span.plus +
              | All the benefits of Node.js
            .content-wrapper.clearfix
              p event-driven, non-blocking design. Use npm and many open-source node.js libraries and frameworks.
        #what_is_strong_typing_pop.what_is_pop
          article
            header
              h2 What is Strong Typing?
            .code
              blockquote
                p The haxe compiler uses static type checking at compile-time so you have a stronger guarantee of the application&#039;s behavior at run-time. Haxe uses several kinds of types.
              ul
                li
                  dfn Class
                  br.hidden
                  code.hidden class Int extends Float { }
                
                li 
                  dfn Enum
                  br
                  p has a finite number of constructors
                  code.hidden
                    | enum Bool {
                    |   true;
                    |   false;
                    | }
                    
                li
                  dfn Dynamic
                  br
                  p skips compile-time type-checking
                
                li
                  dfn Typedef
                  br
                  p Define a structure or long type to reuse throughout your applications.
                  code.hidden
                    | typedef User = {
                    |   var age : Int;
                    |   var name : String;
                    | }
                    span.comment \// ....
                    br
                    | var u : User = { age : 26, name : "Tom" };
                li
                  dfn Function
                  br
                  p Define function types as variables.
                  code.hidden
                    span.comment \// assign a function type to a variable &#039;ftype&#039;, function accepts a String and returns a String
                    br
                    | var ftype : String -> String
                    | 
                    span.comment \// create a function
                    br
                    | function modifyString(s : String) : String {
                    |   return StringTools.replace(s," ","_");
                    | }
                    | 
                    span.comment\// check against it
                    br
                    | static function main(){
                    |   trace( type(modifyString) == f ); \// print true
                    | }
                li
                  dfn Extensions
                  br
                  p
                    | Extends either a typedef or a class on-the-fly.
                    br
                    | Or create cascading typedefs.
                  code.hidden
                    span.comment \// anonymous typedef extension
                    br
                    | typedef Point = {
                    |   var x : Int;
                    |   var y : Int;
                    | }
                    | 
                    span.comment \// define 'p' as a Point with an additional field z
                    br
                    | var p : {> Point, z : Int }
                    | p = { x : 0, y : 0, z : 0 }; // works
                    | p = { x : 0, y : 0 }; // fails
                  p.hidden Use Extensions to create cascading typedefs
                  code.hidden
                    | typedef Point = {
                    |   var x : Int;
                    |   var y : Int;
                    | }
                    | typedef Point3D = {> Point,
                    |   var z : Int;
                    | }
                      
                    
        #what_is_inlining_pop.what_is_pop
          article
            header
              h2 What is Inlining?
            .code
              blockquote
                p The main advantage of using &ldquo;inline&rdquo; is that you can use as many variables as you want without slowing down your code with these variables accesses since the value is directly replaced in the compiled/generated code.
              code
                span.comment \// Inlining Static Variables
                br
                | class Test {
                |   static inline var WIDTH = 500; <span class="comment">\// type Int inferred</span>
                |   static function main() {
                |     trace(WIDTH);
                |     <span class="comment">\// variable is replaced with 500 at compile-time</span>
                |   }
                | }
              br
              blockquote
                p The principle is the same for a method. The less expensive function call is the one that is never done. In order to achieve that for small methods that are often called, you can &ldquo;inline&rdquo; the method body at the place the method is called.
              code
                span.comment \// Inlining Methods
                br
                | class Point {
                |   public var x : Float;
                |   public var y : Float;
                |   public function new(x,y) { this.x = x; this.y = y; }
                |   public <em>inline</em> function add(x2,y2) { 
                |     return new Point(x+x2,y+y2); }
                | }
                | class Test {
                |   public static function main() {
                |     var p = new Point(1,2);
                |     var p2 = p.add(2,3);
                |     <span class="comment">// is the same as writing :</span>
                |     var p2 = new Point(p.x+2,p.y+3);
                |   }
                | }
        #what_is_interfaces_pop.what_is_pop
          article
            header
              h2 What is an Interface?
            .code
              blockquote
                p In object-oriented languages the term &ldquo;interface&rdquo; is often used to define an abstract type that contains no data, but exposes behaviors defined as methods. A class having all the methods corresponding to that interface is said to implement that interface. Furthermore, a class can implement multiple interfaces, and hence can be of different types at the same time.
                p An interface is hence a type definition; anywhere an object can be exchanged (in a function or method call) the type of the object to be exchanged can be defined in terms of an interface instead of a specific class. This allows later code to use the same function exchanging different object types; hence such code turns out to be more generic and reusable.
                p.comment cite: http://en.wikipedia.org/wiki/Interface_(computing)
                
        #what_is_type_inference_pop.what_is_pop
          article
            header
              h2 What is Type Inference?
            .code
              blockquote
                p Type Inference means that the type information is not only checked in the program, it&#039;s also carried when typing, so it doesn&#039;t have to be resolved immediately. For example a local variable can be declared without any type (it will have the type Unknown) and when first used, its type will be set to the corresponding one.
                p Type Inference enables the whole program to be strictly typed without any need to put types everywhere. In particular, local variables do not need to be typed, their types will be inferred when they are first accessed for reading or writing
            
              code
                | var loc;
                | type(loc); // print Unknown&lt;0&gt;
                | loc = "hello";
                | type(loc); // print String
            
        #what_is_generics_pop.what_is_pop
          article
            header
              h2 What are Generics?
            .code
              blockquote
                p A class can have several type parameters that can be used to get extensible behavior.
                p You can define your own parameterized classes with several type parameters for your own usage when you need it.
              code
                | class GenericTest&lt;T&gt; {
                |   private var something:T;
                |   public function putSomething(value:T):T{
                |     something = value;
                |     return something;
                |   }
                |   public function getSomething():T {
                |     return something;
                |   }
                | }
              br
              code
                span.comment \// Generic Factory Method example by <em>hhoelzer</em>
                br
                | class Item&lt;T&gt; {
                |   public var value:T;
                |   <span class="comment">\// factory method</span>
                |   public static function create &lt;T&gt; ():Item&lt;T&gt; {
                |     return new Item&lt;T&gt;();
                |   }
                |   private function new () {}  <span class="comment">\// private constructor</span>
                | }
                | 
                span.comment \// test it
                br
                | class Main {
                |   public static function main () {
                |   <span class="comment">\\* this works because of type-inference, the compiler</span>
                |   <span class="comment">knows that the return type must be of type Item&lt;Int&gt;*/</span>
                |     var myItem:Item&lt;Int&gt; = Item.create(); 
                |     myItem.value = 10; <span class="comment">\// works</span>
                |     trace(myItem.value); <span class="comment">\// 10</span>
                | 
                |     <span class="comment">\// complex type example</span>
                |     var myItem2:Item&lt;Array&lt;Int&gt;&gt; = Item.create();
                |     myItem2.value = [1, 2, 3]; <span class="comment">\// works too</span>
                |     trace(myItem2.value); <span class="comment">\// [1,2,3]</span>
                |   }
                | }
                
        #what_is_packages_pop.what_is_pop
          article
            header
              h2 What is a Package?
            .code
              blockquote
                p Packages are used to organize and contain classes in namespaces to prevent collisions and group functionally similar files together.
                p
                  | the class 
                  u haxe.unit.TestCase
                  br
                  | belongs to package
                  u haxe.unit
                  br
                  | and the class file is located in
                  u haxe/unit/TestCase.hx
                  br 
                  span.comment \// in osx: /usr/lib/haxe/std/haxe/unit/TestCase.hx
                
        #what_is_classes_pop.what_is_pop
          article
            header
              h2 What is a Class?
            .code
              blockquote
                p In object-oriented programming, a class is a construct that is used as a blueprint to create instances of itself – referred to as class instances, class objects, instance objects or simply objects. A class defines constituent members which enable these class instances to have state and behavior. Data field members (member variables or instance variables) enable a class object to maintain state. Other kinds of members, especially methods, enable a class object&#039;s behavior. Class instances are of the type of the associated class.
                p.comment cite: http://en.wikipedia.org/wiki/Class_(computer_programming)
                
        #what_is_macros_pop.what_is_pop
          article
            header
              h2 What is a Macro?
            .code
              blockquote
                p Some languages features such as C #define enable the user to define syntax shortcuts. They are useful to perform some pseudo-code-generation, but at the same time allow to modify the syntax of the language, making the code unreadable for other developers.
                p The haxe macro system allows powerful compile-time code-generation without modifying the haxe syntax.
                p Macros are defined with the <code class="code">@:macro</code> Metadata
              code
                span.comment \// MyMacro.hx
                br
                | import haxe.macro.Expr;
                | class MyMacro {
                |   @:macro public static function getDate() {
                |     var date = Date.now().toString();
                |     var pos = haxe.macro.Context.currentPos();
                |     return { expr : EConst(CString(date)), pos : pos };
                |   }
                | }
                | 
                span.comment \// Test.hx
                br
                | class Test {
                |   static function main(){
                |     var now = MyMacro.getDate(); <span class="comment">// String is inferred</span>
                |     trace(now);
                |     <span class="comment">// print the Date and time this file was <strong>compiled.</strong></span>
                |   }
                | }
              blockquote
                p Note: unlike <em>inline</em> functions you can do actual code generation inside the macro, before it gets compiled.
                p I highly recommend reading more about this feature if you are new to it, it is very powerful.
                
        #what_is_enums_pop.what_is_pop
          article
            header
              h2 What is an Enum?
            .code
              blockquote
                p Enums are different to classes and are declared with a finite number of constructors.
                p When you want to ensure that only a fixed number of values are used then enums are the best thing since they guarantee that other values cannot be constructed.
              code
                | enum Color {
                |   red;
                |   green;
                |   blue;
                | }
                | 
                | class ColorTools {
                |   static function toInt( c : Color ) : Int {
                |     return switch( c ) {
                |       case red: 0xFF0000;
                |       case green: 0x00FF00;
                |       case blue: 0x0000FF;
                |     }
                |   }
                | }
        
        #what_is_iterators_pop.what_is_pop
          article
            header
              h2 What is an Iterator?
            .code
              blockquote
                p An iterator is an object which follows the Iterator typedef (The type T is the iterated type) :
              code
                | typedef Iterator&lt;T&gt; = {
                |   function hasNext() : Bool;
                |   function next() : T;
                | }
              blockquote
                p You can use the for syntax in order to execute iterators. The simplest iterator is the IntIter iterator which can easily be built using the operator ... (three dots). For example this will list all numbers from 0 to 9 :
              code
                | for( i in 0...10 ) {
                |   trace(i);
                | }
                | 
                span.comment \// Or the usual for loop :
                br
                | for( i in 0...arr.length ) {
                |   foo( arr[i] );
                | }
                | 
                span.comment \// Same as :
                br
                | for( item in arr ) {
                |   foo( item );
                | }
        
        #what_is_conditionals_pop.what_is_pop
          article
            header
              h2 What is Conditional Compiling?
            .code
              blockquote
                p Sometimes you might want to have a single library using specific API depending on the platform it is compiled on. At some other time, you might want to do some optimizations only if you turn a flag ON. For all that, you can use conditional compilation macros (AKA preprocessor macros)
                p If the following example was compiled with <code class="code">-js out.js -D nodejs</code><br/>then starting the compiled javascript file with the node command will echo &ldquo;hello javascript!&rdquo; and &ldquo;hello node.js!&rdquo; to the console.
              code
                span.comment \// nested conditional example:
                br
                | #if js
                |   <span class="comment">\// haxe code for javascript target</span>
                |   js.Lib.alert(&ldquo;hello javascript!&rdquo;);
                |   #if nodejs
                |     <span class="comment">\// haxe code specific to nodejs</span>
                |     Node.console.log(&ldquo;hello node.js!&rdquo;);
                |   #else
                |     <span class="comment">\// compile flag -D nodejs was not set</span>
                |   #end
                | #elseif php
                |   <span class="comment">\// haxe code specific to php target</span>
                |   php.Lib.println(&ldquo;hello php!&rdquo;);
                | #else
                |   <span class="comment">\// do something else</span>
                | #end
              br
              code
                span.comment \// multiplatform code example:
                br
                | #if flash8
                span.comment \// haxe code specific for flash player 8
                br
                | #elseif flash
                span.comment \// haxe code specific for flash platform (any version)
                br
                | #elseif js
                span.comment \// haxe code specific for javascript plaform
                br
                | #elseif neko
                span.comment \// haxe code specific for neko plaform
                br
                | #else 
                span.comment \// do something else
                br
                |   #error  <span class="comment">// default: &ldquo;Not implemented on this platform&rdquo;</span>
                |   <span class="comment">// or set your own error message</span>
                |   #error &ldquo;Custom error message&rdquo;
                | #end
                
                
    #whyusehaxe
      article
        header
          h1 Why use haxe?
          h3 You can create apps using a single unified programming language.
        .content-wrapper
          ul.clearfix
            li
              h2
                | Use existing haxe &amp;
                br 
                | JavaScript code
              hr
              p 
                | You can take advantage of the many other haxe, JavaScript, and node.js libraries such as JQuery, express, &amp; mongo db. including many others from
                a(href="http://lib.haxe.org") haxelib
                | .
            li
              h2
                | JavaScript2 
                br 
                | (ECMA4) features
              hr
              p JavaScript2 promised a lot of great features for the future. haxe provides a very similar experience now &amp; is fully compatible with current browsers.
            li.third-column
              h2
                | Elegant Remoting
                br 
                | between platforms
              hr
              p Pass objects between different platforms using remoting classes from the same codebase. Successful de-serialization makes remoting between platforms elegant and fast.
            li.second-row
              h2 Benefits type checking
              hr
              p Strict type checking &amp; compile-time checks allows you to catch errors before testing in the browser or vm. This means a faster workflow for dynamically typed targets (like JavaScript).
            li.second-row
              h2 ECMA style programming
              hr
              p ECMA style programming for client-side, server-side &amp; desktop. The haxe syntax is familiar to those coming from ActionScript and JavaScript.
            li.second-row.third-column
              h2 Extremely fast compiling
              hr
              p compile time benchmarks:
              code.code
                span.comment haxenode.org 
                br
                | Total time : 0.197s
                span.comment haxenode.org/javascripts/script.js
                br
                | Total time : 0.109s
          
    #download
      article
        header
          h1 Install haxe and node-js
        .box.clearfix
          #installing-haxe
            h2 Download haxe 2.08
            // [#{haxe_version}]
            ul
              li
                a(href="http://haxe.org/file/hxinst.dmg") OSX Installer
              li 
                a(href="http://haxe.org/file/hxinst-win.exe") Windows Installer
            ul
              li 
                a(href="http://haxe.org/file/hxinst-linux.tgz") Linux Installer
              li
                a(href="http://haxe.org/download") More Install Options
          #installing-nodejs
            h2 Download node.js 0.6.7
            ul
              li
                a(href="http://nodejs.org/dist/v0.6.7/node-v0.6.7.pkg") OSX Installer
              li
                a(href="http://nodejs.org/dist/v0.6.7/node-v0.6.7.msi") Windows Installer
            ul
              li
                a(href="http://nodejs.org/dist/v0.6.7/node-v0.6.7.tar.gz") Source Code
              li
                a(href="http://nodejs.org/#download") More install options
  
    #installation
      article
        header
          h1 Install haxenode
        
      article.haxecode
        header
          h2 Install nodejs with haxelib
        .code
          code.comment # Setup haxelib if you haven&#039;t done so already
          br
          kbd $ haxelib setup
          br
          samp
            | Please enter haxelib repository path with write access
            | Hit enter for default (/usr/lib/haxe/lib)
            | Path : 
          code.comment # [Return]
          br
          samp haxelib repository is now /usr/lib/haxe/lib/
          br
          br
          code.comment # install nodejs using haxelib
          br
          kbd $ haxelib install nodejs
          br
          br
          code.comment # (optional) check that nodejs was installed successfully
          br
          kbd $ haxelib list
          br
          samp
            | ...
            | nodejs: 0.6 
            // [#{haxenode_version}]
            | ...