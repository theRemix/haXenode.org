#haxenodexample
  .wrapper.clearfix
    #nodejsexample
      article.nodejscode
        header
          h2 node.js
        .code
          code.comment \// example.js
          br
          code
            | var http = require('http');
            | var server = http.createServer(
            |   function (req, res) {
            |     res.writeHead(200, {'Content-Type': 'text/plain'});
            |     res.end('Hello World\\n');
            |   }
            | )
            | 
            | server.listen(1337, "127.0.0.1");
            | console.log('Server running at http://127.0.0.1:1337/');

      article
        header
          h2 run
        .code
          code.comment # in terminal
          br
          kbd $ node example.js
          br
          samp Server running at http://127.0.0.1:1337/
          
    #haxexample
      article.haxecode
        header
          h2 haxenode
        .code
          code.comment \// Haxenode.hx
          br
          code
            | import js.Node;
            | class Haxenode {
            |   public static function main() {
            |     var server = Node.http.createServer( function(
            |       req:NodeHttpServerReq, res:NodeHttpServerResp){
            |         res.setHeader("Content-Type","text/plain");
            |         res.writeHead(200);
            |         res.end('Hello World\\n');
            |       }
            |     );
            | 
            |     server.listen(1337,"localhost");
            |     trace( 'Server running at http://127.0.0.1:1337/' );
            |   }
            | }

      article
        header.compile-and-run
          h2 compile &amp; run
        .code
          code.comment # in terminal
          br
          kbd $ haxe -lib nodejs -js haxenode.js -main Haxenode
          br
          kbd $ node haxenode.js
          br
          samp Server running at http://127.0.0.1:1337/
#main-content
  div(id="haxe:trace")
  .wrapper
    #whatishaxenode.clearfix
      article
        header
          h1 What is haxenode?
        .box.clearfix
          #whatishaxe-left
            h2 All the power of haXe
            .content-wrapper.clearfix
              ul
                li
                  a#what_is_strong_typing(href="") Strong typing
                li
                  a#what_is_inlining(href="") Inlining
                li
                  a#what_is_interfaces(href="") Interfaces
                li
                  a#what_is_type_inference(href="") Type inference
              ul
                li
                  a#what_is_generics(href="") Generics
                li
                  a#what_is_packages(href="") Packages
                li
                  a#what_is_classes(href="") Classes
              ul
                li
                  a#what_is_macros(href="") Macros
                li
                  a#what_is_enums(href="") Enums
                li
                  a#what_is_iterators(href="") Iterators
          #whatishaxe-right  
            h2 
              span.plus +
              | All the benefits of Node.js
            .content-wrapper.clearfix
              p event-driven, non-blocking design. npm and many node.js libraries and frameworks are available.
        #what_is_strong_typing_pop.what_is_pop
          article
            header
              h2 What is Strong Typing
            .code
              | What is Strong Typing
              | What is Strong Typing
              | What is Strong Typing
        #what_is_inlining_pop.what_is_pop
          article
            header
              h2 What is Inlining
            .code
              | What is Inlining
              | What is Inlining
              | What is Inlining
        #what_is_interfaces_pop.what_is_pop
          article
            header
              h2 What is an Interface
            .code
              | What is an Interface
              | What is an Interface
              | What is an Interface
        #what_is_type_inference_pop.what_is_pop
          article
            header
              h2 What is Type Inference
            .code
              | What is Type Inference
        #what_is_generics_pop.what_is_pop
          article
            header
              h2 What is a Generic
            .code
              | What is a Generic
              | What is a Generic
              | What is a Generic
        #what_is_packages_pop.what_is_pop
          article
            header
              h2 What is a Package
            .code
              | What is a Package
              | What is a Package
              | What is a Package
        #what_is_classes_pop.what_is_pop
          article
            header
              h2 What is a Class
            .code
              | What is a Class
        #what_is_macros_pop.what_is_pop
          article
            header
              h2 What is a Macro
            .code
              | What is a Macro
              | What is a Macro
              | What is a Macro
        #what_is_enums_pop.what_is_pop
          article
            header
              h2 What is an Enum
            .code
              | What is an Enum
              | What is an Enum
              | What is an Enum
        #what_is_iterators_pop.what_is_pop
          article
            header
              h2 What is an Iterator
            .code
              | What is an Iterator
              | What is an Iterator
              | What is an Iterator

    #whyusehaxe
      article
        header
          h1 Why use haXe?
          h3 You can create apps using a single unified programming language.
        .content-wrapper
          ul.clearfix
            li
              h2
                | Use existing haXe &amp;
                br 
                | JavaScript code
              hr
              p 
                | You can take advantage of the many other haXe, JavaScript, and node.js libraries such as JQuery, express, &amp; mongo db. including many others from
                a(href="http://lib.haxe.org") haxelib
                | .
            li
              h2
                | JavaScript2 
                br 
                | (ECMA4) features
              hr
              p JavaScript2 promised a lot of great features for the future. HaXe provides a very similar experience now &amp; is fully compatible with current browsers.
            li.third-column
              h2
                | Elegant Remoting
                br 
                | between platforms
              hr
              p Pass objects between different platforms using remoting classes from the same codebase. Successful de-serialization makes remoting between platforms elegant and fast.
            li.second-row
              h2 Benefits type checking
              hr
              p Strict type checking &amp; compile-time checks allows you to catch errors before testing in the browser or vm. This means a faster workflow for dynamically typed targets (like JavaScript).
            li.second-row
              h2 ECMA style programming
              hr
              p ECMA style programming for client-side, server-side &amp; desktop. The haXe syntax is familiar to those coming from ActionScript and JavaScript.
            li.second-row.third-column
              h2 Extremely fast compiling
              hr
              p The compiler is lightning fast (Benchmarks!).
          
    #installation
      article
        header
          h1 Install haXe and node-js
        .box.clearfix
          #installing-haxe
            h2 Install haXe
            ul
              li
                a(href="http://haxe.org/file/hxinst.dmg") OSX Installer
              li 
                a(href="http://haxe.org/file/hxinst-win.exe") Windows Installer
            ul
              li 
                a(href="http://haxe.org/file/hxinst-linux.tgz") Linux Installer
              li
                a(href="http://haxe.org/download") Manual install and more
          #installing-nodejs
            h2 Install node.js 0.6.7
            ul
              li
                a(href="http://nodejs.org/dist/v0.6.7/node-v0.6.7.pkg") OSX Installer
              li
                a(href="http://nodejs.org/dist/v0.6.7/node-v0.6.7.msi") Windows Installer
            ul
              li
                a(href="http://nodejs.org/dist/v0.6.7/node-v0.6.7.tar.gz") Source Code
              li
                a(href="http://nodejs.org/#download") More install options
  
    #installation-haxenode
      article
        header
          h1 Install haXenode
        
      article.haxecode
        header
          h2 Install nodejs with haxelib
        .code
          code.comment # Setup haxelib if you haven&#039;t done so already
          br
          kbd $ haxelib setup
          br
          samp
            | Please enter haxelib repository path with write access
            | Hit enter for default (/usr/lib/haxe/lib)
            | Path : 
          code.comment # [Return]
          br
          samp haxelib repository is now /usr/lib/haxe/lib/
          br
          br
          code.comment # install nodejs using haxelib
          br
          kbd $ haxelib install nodejs
          br
          br
          code.comment # (optional) check that nodejs was installed successfully
          br
          kbd $ haxelib list
          br
          samp
            | ...
            | nodejs: 0.6 
            // [#{haxenode_version}]
            | ...